@page "/dbMain/{DbName}"
@inject IDriver _driver
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="row">
    <div class="col-md-12">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                <h1>Классы:</h1>
            </div>
            <div class="col-auto">
                @if (_formClass)
                {
                    <EditForm class="d-flex flex-row" Model="_className" OnValidSubmit="CreateClass">
                        <InputText type="text" @bind-Value="_className" class="form-control mr-2" placeholder="Имя класса" required/>
                        <button class="btn btn-primary ms-2">Добавить</button>
                    </EditForm>
                }
                else
                {
                    <button class="btn btn-outline-primary " @onclick="ShowClassForm">Добавить новый класс</button>
                }
            </div>
        </div>
        @foreach (string className in _classesNames)
        {
            <ClassControl ClassName=@className DbName=@DbName></ClassControl>
        }
    </div>
    <div class="col-md-12">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                <h1>Отношения:</h1>
            </div>
            <div class="col-auto">
                @if (_formRel)
                {
                    <EditForm class="d-flex flex-row" Model="_newRelation" OnValidSubmit="CreateRel">
                        <select required class="form-control" @bind="_newRelation.FirstClassId">
                            @for (int i = 0; i < _classesNames.Count; i++)
                            {
                                <option value="@i">@_classesNames[i]</option>
                            }
                        </select>
                        <InputText required class="form-control ms-2" @bind-Value="_newRelation.Name" />
                        <select required class="form-control ms-2" @bind="_newRelation.SecondClassId">
                            @for (int i = 0; i < _classesNames.Count; i++)
                            {
                                <option value="@i">@_classesNames[i]</option>
                            }
                        </select>
                        <button class="btn btn-primary ms-2">Добавить</button>
                    </EditForm>
                }
                else
                {
                    <button class="btn btn-outline-primary " @onclick="ShowRelForm">Добавить отношение</button>
                }
            </div>
        </div>
        @foreach (Relation relation in _relList)
        {
            <RelControl Relation=@relation DbName=@DbName></RelControl>
        }
    </div>
</div>

@code{
    [Parameter]
    public string DbName { get; set; } = "";

    private bool _formClass = false;
    private string _className = "";
    private List<string> _classesNames = new List<string>();

    private bool _formRel = false;
    private Relation _newRelation = new Relation();
    private List<Relation> _relList = new List<Relation>();

    protected override void OnInitialized()
    {
        GetClassNames();
        GetRelNames();
    }

    @* START OF CLASS SECTION *@

    private async void GetClassNames()
    {
        _classesNames = new List<string>();
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@"MATCH (n) where labels(n) return labels(n)");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var labels = record.Values.Where(record => record.Key == "labels(n)").Select(record => record.Value).FirstOrDefault();
                var name = labels.As<List<string>>().Aggregate((result, nextName) => result + ":" + nextName);
                if (!_classesNames.Contains(name))
                {
                    _classesNames.Add(name);
                }
            }
        }
        finally
        {
            await session.CloseAsync();
        }

        StateHasChanged();
    }

    private async void CreateClass()
    {
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@$"CREATE (n:component:{_className})");
        }
        finally
        {
            await session.CloseAsync();
        }

        _className = "";
        _formClass = false;

        GetClassNames();
    }

    private void ShowClassForm() => _formClass = true;

    @* END OF CLASS SECTION *@

    @* START OF RELATION SECTION *@

    private async void GetRelNames()
    {
        _relList = new List<Relation>();
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@"match (n)-[r]-(b) return labels(n), type(r), labels(b)");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var value = record.Values.Where(r => r.Key == "type(r)").FirstOrDefault();
                var name = value.Value.As<string>();

                value = record.Values.Where(r => r.Key == "labels(n)").FirstOrDefault();
                var class1 = value.Value.As<List<string>>()[0];

                value = record.Values.Where(r => r.Key == "labels(b)").FirstOrDefault();
                var class2 = value.Value.As<List<string>>()[0];

                if (_relList.Where(r => r.Name == name && r.FirstClassName == class1 && r.SecondClassName == class2).Count() == 0)
                {
                    _relList.Add(new Relation()
                    {
                        Name = name,
                        FirstClassName = class1,
                        SecondClassName = class2
                    });
                }
            }
        }
        finally
        {
            await session.CloseAsync();
        }
        StateHasChanged();
    }

    private async void CreateRel()
    {
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            var firstClass = _classesNames[_newRelation.FirstClassId];
            var secondClass = _classesNames[_newRelation.SecondClassId];
            var relationName = _newRelation.Name;
            string query = @$"CREATE (n:{firstClass})-[r:{relationName}]->(b:{secondClass})";
            cursor = await session.RunAsync(query);
        }
        finally
        {
            await session.CloseAsync();
        }

        _newRelation = new Relation();
        _formRel = false;

        GetRelNames();
    }

    private void ShowRelForm() => _formRel = true;

    @* END OF RELATION SECTION *@
}