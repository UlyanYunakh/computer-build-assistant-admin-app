@page "/dbMain/{DbName}"
@inject IDriver _driver
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="row">
    <div class="col-md-12">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                <h1>Компоненты:</h1>
            </div>
            <div class="col-auto">
                @if (_formComponent)
                {
                    <EditForm class="d-flex flex-row" Model="_componentName" OnValidSubmit="CreateClass">
                        <InputText type="text" @bind-Value="_componentName" class="form-control mr-2" placeholder="Имя компоненты" required/>
                        <button class="btn btn-primary ms-2">Добавить</button>
                    </EditForm>
                }
                else
                {
                    <button class="btn btn-outline-primary " @onclick="ShowClassForm">Добавить новый компонент</button>
                }
            </div>
        </div>
        @foreach (string componentName in _componentsNames)
        {
            <ClassControl ComponentName=@componentName DbName=@DbName></ClassControl>
        }
    </div>
    <div class="col-md-12">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                <h1>Отношения:</h1>
            </div>
            <div class="col-auto">
                @if (_formRel)
                {
                    <div>
                        <div>
                            <EditForm class="d-flex flex-row" Model="_rel" OnValidSubmit="CreateRel">
                                <select required class="form-control mr-2" @bind="_rel.Class1Id">
                                    @for (int i = 0; i < _componentsNames.Count; i++)
                                    {
                                        <option value="@i">@_componentsNames[i]</option>
                                    }
                                </select>
                                <InputText required class="form-control mr-2" @bind-Value="_rel.Name" />
                                <select required class="form-control mr-2" @bind="_rel.Class2Id">
                                    @for (int i = 0; i < _componentsNames.Count; i++)
                                    {
                                        <option value="@i">@_componentsNames[i]</option>
                                    }
                                </select>
                                <button class="btn btn-primary">Добавить</button>
                            </EditForm>
                        </div>
                    </div>
                }
                else
                {
                    <button class="btn btn-outline-primary " @onclick="ShowRelForm">Добавить отношение</button>
                }
            </div>
        </div>
        @foreach (Rel rel in _relList)
        {
            <RelControl Rel=@rel DbName=@DbName></RelControl>
        }
    </div>
    <div class="col-md-12 mb-2">
        <div class="row g-2 align-items-center">
            @if (_formClassFind)
            {
                <EditForm class=" col-auto d-flex flex-row" Model="_componentName" OnValidSubmit="ClassFind">
                    <select required class="form-control mr-2" @bind="_classId">
                        @for (int i = 0; i < _componentsNames.Count; i++)
                        {
                            <option value="@i">@_componentsNames[i]</option>
                        }
                    </select>
                    <InputText required type="text" class="form-control mr-2" @bind-Value="_componentName" />
                    <button class="btn btn-primary">Найти</button>
                </EditForm>
            }
            else
            {
                <button class="btn btn-outline-primary " @onclick="ShowClassFind">Найти экземпляр</button>
            }
        </div>
        @if(_classFind != "")
        {
            <ClassCopyControl ClassName=@_componentsNames[_classId] CopyName=@_classFind DbName=@DbName></ClassCopyControl>
            _classFind = "";
        }
    </div>
    <div class="col-md-12 mb-2">
        <div class="row g-2 align-items-center">
            @if (_formRelFind)
            {
                <EditForm class=" col-auto d-flex flex-row" Model="_componentName" OnValidSubmit="RelFind">
                    <select required class="form-control mr-2" @bind="_class1Id">
                        @for (int i = 0; i < _componentsNames.Count; i++)
                        {
                            <option value="@i">@_componentsNames[i]</option>
                        }
                    </select>
                    <InputText required type="text" class="form-control mr-2" @bind-Value="_class1Name" />
                    <InputText required type="text" class="form-control mr-2" @bind-Value="_relName" />
                    <select required class="form-control mr-2" @bind="_class2Id">
                        @for (int i = 0; i < _componentsNames.Count; i++)
                        {
                            <option value="@i">@_componentsNames[i]</option>
                        }
                    </select>
                    <InputText required type="text" class="form-control mr-2" @bind-Value="_class2Name" />
                    <button class="btn btn-primary">Найти</button>
                </EditForm>
            }
            else
            {
                <button class="btn btn-outline-primary " @onclick="ShowRelFind">Найти отношение</button>
            }
        </div>
        @if(_findRel != null)
        {
            <div class="bg-light border rounded p-2 m-2">
                <RelCopy Rel=@_findRel DbName=@DbName></RelCopy>
            </div>
        }
    </div>
</div>
@code{
    [Parameter]
    public string DbName { get; set; } = "";

    private bool _formComponent = false;
    private string _componentName = "";
    private List<string> _componentsNames = new List<string>();

    private bool _formRel = false;
    private Rel _rel = new Rel();
    private List<Rel> _relList = new List<Rel>();

    private bool _formClassFind = false;
    private int _classId;
    private string _classFind = "";

    private int _class1Id;
    private string _class1Name = "";
    private int _class2Id;
    private string _class2Name = "";
    private string _relName = "";
    private bool _formRelFind = false;
    private Rel _findRel = null;

    protected override void OnInitialized()
    {
        GetClassNames();
        GetRelNames();
    }

    @* Classes *@
    private async void GetClassNames()
    {
        _componentsNames = new List<string>();
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@"MATCH (n:component) where labels(n) return labels(n)");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var labels = record.Values.Where(record => record.Key == "labels(n)").Select(record => record.Value).FirstOrDefault();
                var name = labels.As<List<string>>().Aggregate((result, nextName) => result + ":" + nextName);
                if (!_componentsNames.Contains(name))
                {
                    _componentsNames.Add(name);
                }
            }
        }
        finally
        {
            await session.CloseAsync();
        }

        StateHasChanged();
    }

    private async void CreateClass()
    {
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@$"CREATE (n:component:{_componentName})");
        }
        finally
        {
            await session.CloseAsync();
        }

        _componentName = "";
        _formComponent = false;

        GetClassNames();
    }

    private void ShowClassForm() => _formComponent = true;



    private void ShowRelFind() => _formRelFind = true;
    private async void RelFind()
    {
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            string node1 = "n:" + _componentsNames[_class1Id] + "{title:\"" + _class1Name + "\"}";
            string node2 = "b:" + _componentsNames[_class2Id] + "{title:\"" + _class2Name + "\"}";
            cursor = await session.RunAsync(@$"match ({node1})-[r:{_relName}]-({node2}) return type(r), labels(b), b.title, labels(n), n.title");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var value = record.Values.Where(r => r.Key == "type(r)").FirstOrDefault();
                var relName = value.Value.As<string>();
                
                value = record.Values.Where(r => r.Key == "labels(n)").FirstOrDefault();
                var class1 = value.Value.As<List<string>>()[0];

                value = record.Values.Where(r => r.Key == "n.title").FirstOrDefault();
                var class1Copy = value.Value.As<string>();

                value = record.Values.Where(r => r.Key == "labels(b)").FirstOrDefault();
                var class2 = value.Value.As<List<string>>()[0];

                value = record.Values.Where(r => r.Key == "b.title").FirstOrDefault();
                var class2Copy = value.Value.As<string>();

                _findRel = new Rel()
                {
                    Name = relName,
                    Class1 = class1,
                    Class1Copy = class1Copy,
                    Class2 = class2,
                    Class2Copy = class2Copy
                };
            }
        }
        finally
        {
            await session.CloseAsync();
        }
        _formRelFind = false;
        StateHasChanged();
    }

    private void ShowClassFind() => _formClassFind = true;

    private async void ClassFind()
    {
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@"MATCH (n:" + _componentsNames[_classId] + "{title:\"" + _componentName + "\"}) return n.title");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var value = record.Values.Where(r => r.Key == "n.title").FirstOrDefault();
                _classFind = value.Value.As<string>();
            }
        }
        finally
        {
            await session.CloseAsync();
        }
        _formClassFind = false;
        StateHasChanged();
    }

    private async void GetRelNames()
    {
        _relList = new List<Rel>();
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            cursor = await session.RunAsync(@"match (n)-[r]-(b) return labels(n), type(r), labels(b)");
            var list = await cursor.ToListAsync();
            foreach (IRecord record in list)
            {
                var value = record.Values.Where(r => r.Key == "type(r)").FirstOrDefault();
                var name = value.Value.As<string>();

                if (_relList.Where(r => r.Name == name).Count() == 0)
                {
                    value = record.Values.Where(r => r.Key == "labels(n)").FirstOrDefault();
                    var class1 = value.Value.As<List<string>>()[0];

                    value = record.Values.Where(r => r.Key == "labels(b)").FirstOrDefault();
                    var class2 = value.Value.As<List<string>>()[0];

                    _relList.Add(new Rel()
                    {
                        Name = name,
                        Class1 = class1,
                        Class2 = class2
                    });
                }
            }
        }
        finally
        {
            await session.CloseAsync();
        }
        StateHasChanged();
    }

    private async void CreateRel()
    {
        IResultCursor cursor;
        IAsyncSession session = _driver.AsyncSession(c => c.WithDatabase(DbName));
        try
        {
            string query = @$"CREATE (n:{_componentsNames[_rel.Class1Id]})-[r:{_rel.Name}]->(b:{_componentsNames[_rel.Class2Id]})";
            cursor = await session.RunAsync(query);
        }
        finally
        {
            await session.CloseAsync();
        }

        _rel = new Rel();
        _formRel = false;

        GetRelNames();
    }

    private void ShowRelForm() => _formRel = true;
}